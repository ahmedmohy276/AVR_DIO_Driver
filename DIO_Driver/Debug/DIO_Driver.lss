
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000682  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aad  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068f  00000000  00000000  00001251  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000670  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bd8  00000000  00000000  000023be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  00002f96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 05 03 	call	0x60a	; 0x60a <main>
  64:	0c 94 3f 03 	jmp	0x67e	; 0x67e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_VoidSetPinDirection>:
#include "DIO_REG.h"
//#include <avr/io.h>

void DIO_VoidSetPinDirection(u8 pin_number,u8 port_number,u8 direction)
{
	switch(port_number)
  6c:	61 30       	cpi	r22, 0x01	; 1
  6e:	39 f1       	breq	.+78     	; 0xbe <DIO_VoidSetPinDirection+0x52>
  70:	38 f0       	brcs	.+14     	; 0x80 <DIO_VoidSetPinDirection+0x14>
  72:	62 30       	cpi	r22, 0x02	; 2
  74:	09 f4       	brne	.+2      	; 0x78 <DIO_VoidSetPinDirection+0xc>
  76:	42 c0       	rjmp	.+132    	; 0xfc <DIO_VoidSetPinDirection+0x90>
  78:	63 30       	cpi	r22, 0x03	; 3
  7a:	09 f4       	brne	.+2      	; 0x7e <DIO_VoidSetPinDirection+0x12>
  7c:	5e c0       	rjmp	.+188    	; 0x13a <DIO_VoidSetPinDirection+0xce>
  7e:	08 95       	ret
	{
		case portA:
			if (direction==OUTPUT)
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	69 f4       	brne	.+26     	; 0x9e <DIO_VoidSetPinDirection+0x32>
			{
				SET_Bit(DDRA_REG,pin_number);
  84:	4a b3       	in	r20, 0x1a	; 26
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	b9 01       	movw	r22, r18
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_VoidSetPinDirection+0x26>
  8e:	66 0f       	add	r22, r22
  90:	77 1f       	adc	r23, r23
  92:	8a 95       	dec	r24
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_VoidSetPinDirection+0x22>
  96:	cb 01       	movw	r24, r22
  98:	84 2b       	or	r24, r20
  9a:	8a bb       	out	0x1a, r24	; 26
  9c:	08 95       	ret
			}
			else if (direction==INPUT)
  9e:	41 11       	cpse	r20, r1
  a0:	6a c0       	rjmp	.+212    	; 0x176 <DIO_VoidSetPinDirection+0x10a>
			{
				CLEAR_Bit(DDRA_REG,pin_number);
  a2:	4a b3       	in	r20, 0x1a	; 26
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_VoidSetPinDirection+0x44>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	8a 95       	dec	r24
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_VoidSetPinDirection+0x40>
  b4:	cb 01       	movw	r24, r22
  b6:	80 95       	com	r24
  b8:	84 23       	and	r24, r20
  ba:	8a bb       	out	0x1a, r24	; 26
  bc:	08 95       	ret
			}
			break;
		case portB:
			if (direction==OUTPUT)
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	69 f4       	brne	.+26     	; 0xdc <DIO_VoidSetPinDirection+0x70>
			{
				SET_Bit(DDRB_REG,pin_number);
  c2:	47 b3       	in	r20, 0x17	; 23
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	b9 01       	movw	r22, r18
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_VoidSetPinDirection+0x64>
  cc:	66 0f       	add	r22, r22
  ce:	77 1f       	adc	r23, r23
  d0:	8a 95       	dec	r24
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_VoidSetPinDirection+0x60>
  d4:	cb 01       	movw	r24, r22
  d6:	84 2b       	or	r24, r20
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
			}
			else if (direction==INPUT)
  dc:	41 11       	cpse	r20, r1
  de:	4b c0       	rjmp	.+150    	; 0x176 <DIO_VoidSetPinDirection+0x10a>
			{
				CLEAR_Bit(DDRB_REG,pin_number);
  e0:	47 b3       	in	r20, 0x17	; 23
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	b9 01       	movw	r22, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_VoidSetPinDirection+0x82>
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	8a 95       	dec	r24
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_VoidSetPinDirection+0x7e>
  f2:	cb 01       	movw	r24, r22
  f4:	80 95       	com	r24
  f6:	84 23       	and	r24, r20
  f8:	87 bb       	out	0x17, r24	; 23
  fa:	08 95       	ret
			}
			break;
		case portC:
			if (direction==OUTPUT)
  fc:	41 30       	cpi	r20, 0x01	; 1
  fe:	69 f4       	brne	.+26     	; 0x11a <DIO_VoidSetPinDirection+0xae>
			{
				SET_Bit(DDRC_REG,pin_number);
 100:	44 b3       	in	r20, 0x14	; 20
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	b9 01       	movw	r22, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_VoidSetPinDirection+0xa2>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	8a 95       	dec	r24
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_VoidSetPinDirection+0x9e>
 112:	cb 01       	movw	r24, r22
 114:	84 2b       	or	r24, r20
 116:	84 bb       	out	0x14, r24	; 20
 118:	08 95       	ret
			}
			else if (direction==INPUT)
 11a:	41 11       	cpse	r20, r1
 11c:	2c c0       	rjmp	.+88     	; 0x176 <DIO_VoidSetPinDirection+0x10a>
			{
				CLEAR_Bit(DDRC_REG,pin_number);
 11e:	44 b3       	in	r20, 0x14	; 20
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	b9 01       	movw	r22, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_VoidSetPinDirection+0xc0>
 128:	66 0f       	add	r22, r22
 12a:	77 1f       	adc	r23, r23
 12c:	8a 95       	dec	r24
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_VoidSetPinDirection+0xbc>
 130:	cb 01       	movw	r24, r22
 132:	80 95       	com	r24
 134:	84 23       	and	r24, r20
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
			}
			break;
		case portD:
			if (direction==OUTPUT)
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	69 f4       	brne	.+26     	; 0x158 <DIO_VoidSetPinDirection+0xec>
			{
				SET_Bit(DDRD_REG,pin_number);
 13e:	41 b3       	in	r20, 0x11	; 17
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	b9 01       	movw	r22, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_VoidSetPinDirection+0xe0>
 148:	66 0f       	add	r22, r22
 14a:	77 1f       	adc	r23, r23
 14c:	8a 95       	dec	r24
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_VoidSetPinDirection+0xdc>
 150:	cb 01       	movw	r24, r22
 152:	84 2b       	or	r24, r20
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret
			}
			else if (direction==INPUT)
 158:	41 11       	cpse	r20, r1
 15a:	0d c0       	rjmp	.+26     	; 0x176 <DIO_VoidSetPinDirection+0x10a>
			{
				CLEAR_Bit(DDRD_REG,pin_number);
 15c:	41 b3       	in	r20, 0x11	; 17
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	b9 01       	movw	r22, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_VoidSetPinDirection+0xfe>
 166:	66 0f       	add	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	8a 95       	dec	r24
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_VoidSetPinDirection+0xfa>
 16e:	cb 01       	movw	r24, r22
 170:	80 95       	com	r24
 172:	84 23       	and	r24, r20
 174:	81 bb       	out	0x11, r24	; 17
 176:	08 95       	ret

00000178 <DIO_VoidSetPinValue>:
}


void DIO_VoidSetPinValue(u8 pin_number,u8 port_number,u8 value)
{
	switch(port_number)
 178:	61 30       	cpi	r22, 0x01	; 1
 17a:	39 f1       	breq	.+78     	; 0x1ca <DIO_VoidSetPinValue+0x52>
 17c:	38 f0       	brcs	.+14     	; 0x18c <DIO_VoidSetPinValue+0x14>
 17e:	62 30       	cpi	r22, 0x02	; 2
 180:	09 f4       	brne	.+2      	; 0x184 <DIO_VoidSetPinValue+0xc>
 182:	42 c0       	rjmp	.+132    	; 0x208 <DIO_VoidSetPinValue+0x90>
 184:	63 30       	cpi	r22, 0x03	; 3
 186:	09 f4       	brne	.+2      	; 0x18a <DIO_VoidSetPinValue+0x12>
 188:	5e c0       	rjmp	.+188    	; 0x246 <DIO_VoidSetPinValue+0xce>
 18a:	08 95       	ret
	{
		case portA:
			if (value==HIGH)
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	69 f4       	brne	.+26     	; 0x1aa <DIO_VoidSetPinValue+0x32>
			{
				SET_Bit(PORTA_REG,pin_number);
 190:	4b b3       	in	r20, 0x1b	; 27
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	b9 01       	movw	r22, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_VoidSetPinValue+0x26>
 19a:	66 0f       	add	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_VoidSetPinValue+0x22>
 1a2:	cb 01       	movw	r24, r22
 1a4:	84 2b       	or	r24, r20
 1a6:	8b bb       	out	0x1b, r24	; 27
 1a8:	08 95       	ret
			}
			else if (value==LOW)
 1aa:	41 11       	cpse	r20, r1
 1ac:	6a c0       	rjmp	.+212    	; 0x282 <DIO_VoidSetPinValue+0x10a>
			{
				CLEAR_Bit(PORTA_REG,pin_number);
 1ae:	4b b3       	in	r20, 0x1b	; 27
 1b0:	21 e0       	ldi	r18, 0x01	; 1
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	b9 01       	movw	r22, r18
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_VoidSetPinValue+0x44>
 1b8:	66 0f       	add	r22, r22
 1ba:	77 1f       	adc	r23, r23
 1bc:	8a 95       	dec	r24
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_VoidSetPinValue+0x40>
 1c0:	cb 01       	movw	r24, r22
 1c2:	80 95       	com	r24
 1c4:	84 23       	and	r24, r20
 1c6:	8b bb       	out	0x1b, r24	; 27
 1c8:	08 95       	ret
			}
			break;
		case portB:
			if (value==HIGH)
 1ca:	41 30       	cpi	r20, 0x01	; 1
 1cc:	69 f4       	brne	.+26     	; 0x1e8 <DIO_VoidSetPinValue+0x70>
			{
				SET_Bit(PORTB_REG,pin_number);
 1ce:	48 b3       	in	r20, 0x18	; 24
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	b9 01       	movw	r22, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_VoidSetPinValue+0x64>
 1d8:	66 0f       	add	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	8a 95       	dec	r24
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_VoidSetPinValue+0x60>
 1e0:	cb 01       	movw	r24, r22
 1e2:	84 2b       	or	r24, r20
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	08 95       	ret
			}
			else if (value==LOW)
 1e8:	41 11       	cpse	r20, r1
 1ea:	4b c0       	rjmp	.+150    	; 0x282 <DIO_VoidSetPinValue+0x10a>
			{
				CLEAR_Bit(PORTB_REG,pin_number);
 1ec:	48 b3       	in	r20, 0x18	; 24
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	b9 01       	movw	r22, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_VoidSetPinValue+0x82>
 1f6:	66 0f       	add	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	8a 95       	dec	r24
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_VoidSetPinValue+0x7e>
 1fe:	cb 01       	movw	r24, r22
 200:	80 95       	com	r24
 202:	84 23       	and	r24, r20
 204:	88 bb       	out	0x18, r24	; 24
 206:	08 95       	ret
			}
			break;
		
		case portC:
			if (value==HIGH)
 208:	41 30       	cpi	r20, 0x01	; 1
 20a:	69 f4       	brne	.+26     	; 0x226 <DIO_VoidSetPinValue+0xae>
			{
				SET_Bit(PORTC_REG,pin_number);
 20c:	45 b3       	in	r20, 0x15	; 21
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	b9 01       	movw	r22, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_VoidSetPinValue+0xa2>
 216:	66 0f       	add	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	8a 95       	dec	r24
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_VoidSetPinValue+0x9e>
 21e:	cb 01       	movw	r24, r22
 220:	84 2b       	or	r24, r20
 222:	85 bb       	out	0x15, r24	; 21
 224:	08 95       	ret
			}
			else if (value==LOW)
 226:	41 11       	cpse	r20, r1
 228:	2c c0       	rjmp	.+88     	; 0x282 <DIO_VoidSetPinValue+0x10a>
			{
				CLEAR_Bit(PORTC_REG,pin_number);
 22a:	45 b3       	in	r20, 0x15	; 21
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	b9 01       	movw	r22, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_VoidSetPinValue+0xc0>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	8a 95       	dec	r24
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_VoidSetPinValue+0xbc>
 23c:	cb 01       	movw	r24, r22
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	85 bb       	out	0x15, r24	; 21
 244:	08 95       	ret
			}
			break;
		case portD:
			if (value==HIGH)
 246:	41 30       	cpi	r20, 0x01	; 1
 248:	69 f4       	brne	.+26     	; 0x264 <DIO_VoidSetPinValue+0xec>
			{
				SET_Bit(PORTD_REG,pin_number);
 24a:	42 b3       	in	r20, 0x12	; 18
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_VoidSetPinValue+0xe0>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	8a 95       	dec	r24
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_VoidSetPinValue+0xdc>
 25c:	cb 01       	movw	r24, r22
 25e:	84 2b       	or	r24, r20
 260:	82 bb       	out	0x12, r24	; 18
 262:	08 95       	ret
			}
			else if (value==LOW)
 264:	41 11       	cpse	r20, r1
 266:	0d c0       	rjmp	.+26     	; 0x282 <DIO_VoidSetPinValue+0x10a>
			{
				CLEAR_Bit(PORTD_REG,pin_number);
 268:	42 b3       	in	r20, 0x12	; 18
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	b9 01       	movw	r22, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_VoidSetPinValue+0xfe>
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	8a 95       	dec	r24
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_VoidSetPinValue+0xfa>
 27a:	cb 01       	movw	r24, r22
 27c:	80 95       	com	r24
 27e:	84 23       	and	r24, r20
 280:	82 bb       	out	0x12, r24	; 18
 282:	08 95       	ret

00000284 <DIO_VoidSetPortDirection>:


void DIO_VoidSetPortDirection(u8 port_number,u8 direction)
{
	u8 pinnumber=8;
	switch(port_number)
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	b9 f1       	breq	.+110    	; 0x2f6 <DIO_VoidSetPortDirection+0x72>
 288:	38 f0       	brcs	.+14     	; 0x298 <DIO_VoidSetPortDirection+0x14>
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	09 f4       	brne	.+2      	; 0x290 <DIO_VoidSetPortDirection+0xc>
 28e:	62 c0       	rjmp	.+196    	; 0x354 <DIO_VoidSetPortDirection+0xd0>
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	09 f4       	brne	.+2      	; 0x296 <DIO_VoidSetPortDirection+0x12>
 294:	8e c0       	rjmp	.+284    	; 0x3b2 <DIO_VoidSetPortDirection+0x12e>
 296:	08 95       	ret
	{
		case portA:
			if (direction==OUTPUT)
 298:	61 30       	cpi	r22, 0x01	; 1
 29a:	a9 f4       	brne	.+42     	; 0x2c6 <DIO_VoidSetPortDirection+0x42>
 29c:	0e c0       	rjmp	.+28     	; 0x2ba <DIO_VoidSetPortDirection+0x36>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(DDRA_REG,i);
 29e:	4a b3       	in	r20, 0x1a	; 26
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 2e       	mov	r0, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_VoidSetPortDirection+0x28>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_VoidSetPortDirection+0x24>
 2b0:	84 2b       	or	r24, r20
 2b2:	8a bb       	out	0x1a, r24	; 26
	switch(port_number)
	{
		case portA:
			if (direction==OUTPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 2b4:	2f 5f       	subi	r18, 0xFF	; 255
 2b6:	3f 4f       	sbci	r19, 0xFF	; 255
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_VoidSetPortDirection+0x3a>
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	28 30       	cpi	r18, 0x08	; 8
 2c0:	31 05       	cpc	r19, r1
 2c2:	68 f3       	brcs	.-38     	; 0x29e <DIO_VoidSetPortDirection+0x1a>
 2c4:	08 95       	ret
				{
					SET_Bit(DDRA_REG,i);
				}
			}
			else if (direction==INPUT)
 2c6:	66 23       	and	r22, r22
 2c8:	81 f0       	breq	.+32     	; 0x2ea <DIO_VoidSetPortDirection+0x66>
 2ca:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(DDRA_REG,i);
 2cc:	4a b3       	in	r20, 0x1a	; 26
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 2e       	mov	r0, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_VoidSetPortDirection+0x56>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_VoidSetPortDirection+0x52>
 2de:	80 95       	com	r24
 2e0:	84 23       	and	r24, r20
 2e2:	8a bb       	out	0x1a, r24	; 26
					SET_Bit(DDRA_REG,i);
				}
			}
			else if (direction==INPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 2e4:	2f 5f       	subi	r18, 0xFF	; 255
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_VoidSetPortDirection+0x6a>
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	28 30       	cpi	r18, 0x08	; 8
 2f0:	31 05       	cpc	r19, r1
 2f2:	60 f3       	brcs	.-40     	; 0x2cc <DIO_VoidSetPortDirection+0x48>
 2f4:	08 95       	ret
					CLEAR_Bit(DDRA_REG,i);
				}
			}
		break;
		case portB:
			if (direction==OUTPUT)
 2f6:	61 30       	cpi	r22, 0x01	; 1
 2f8:	a9 f4       	brne	.+42     	; 0x324 <DIO_VoidSetPortDirection+0xa0>
 2fa:	0e c0       	rjmp	.+28     	; 0x318 <DIO_VoidSetPortDirection+0x94>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(DDRB_REG,i);
 2fc:	47 b3       	in	r20, 0x17	; 23
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 2e       	mov	r0, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_VoidSetPortDirection+0x86>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_VoidSetPortDirection+0x82>
 30e:	84 2b       	or	r24, r20
 310:	87 bb       	out	0x17, r24	; 23
			}
		break;
		case portB:
			if (direction==OUTPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 312:	2f 5f       	subi	r18, 0xFF	; 255
 314:	3f 4f       	sbci	r19, 0xFF	; 255
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_VoidSetPortDirection+0x98>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	28 30       	cpi	r18, 0x08	; 8
 31e:	31 05       	cpc	r19, r1
 320:	68 f3       	brcs	.-38     	; 0x2fc <DIO_VoidSetPortDirection+0x78>
 322:	08 95       	ret
				{
					SET_Bit(DDRB_REG,i);
				}
			}
			else if (direction==INPUT)
 324:	66 23       	and	r22, r22
 326:	81 f0       	breq	.+32     	; 0x348 <DIO_VoidSetPortDirection+0xc4>
 328:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(DDRB_REG,i);
 32a:	47 b3       	in	r20, 0x17	; 23
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 2e       	mov	r0, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_VoidSetPortDirection+0xb4>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_VoidSetPortDirection+0xb0>
 33c:	80 95       	com	r24
 33e:	84 23       	and	r24, r20
 340:	87 bb       	out	0x17, r24	; 23
					SET_Bit(DDRB_REG,i);
				}
			}
			else if (direction==INPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 342:	2f 5f       	subi	r18, 0xFF	; 255
 344:	3f 4f       	sbci	r19, 0xFF	; 255
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_VoidSetPortDirection+0xc8>
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	28 30       	cpi	r18, 0x08	; 8
 34e:	31 05       	cpc	r19, r1
 350:	60 f3       	brcs	.-40     	; 0x32a <DIO_VoidSetPortDirection+0xa6>
 352:	08 95       	ret
					CLEAR_Bit(DDRB_REG,i);
				}
			}
			break;
		case portC:
			if (direction==OUTPUT)
 354:	61 30       	cpi	r22, 0x01	; 1
 356:	a9 f4       	brne	.+42     	; 0x382 <DIO_VoidSetPortDirection+0xfe>
 358:	0e c0       	rjmp	.+28     	; 0x376 <DIO_VoidSetPortDirection+0xf2>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(DDRC_REG,i);
 35a:	44 b3       	in	r20, 0x14	; 20
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 2e       	mov	r0, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_VoidSetPortDirection+0xe4>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_VoidSetPortDirection+0xe0>
 36c:	84 2b       	or	r24, r20
 36e:	84 bb       	out	0x14, r24	; 20
			}
			break;
		case portC:
			if (direction==OUTPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 370:	2f 5f       	subi	r18, 0xFF	; 255
 372:	3f 4f       	sbci	r19, 0xFF	; 255
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_VoidSetPortDirection+0xf6>
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	28 30       	cpi	r18, 0x08	; 8
 37c:	31 05       	cpc	r19, r1
 37e:	68 f3       	brcs	.-38     	; 0x35a <DIO_VoidSetPortDirection+0xd6>
 380:	08 95       	ret
				{
					SET_Bit(DDRC_REG,i);
				}
			}
			else if (direction==INPUT)
 382:	66 23       	and	r22, r22
 384:	81 f0       	breq	.+32     	; 0x3a6 <DIO_VoidSetPortDirection+0x122>
 386:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(DDRC_REG,i);
 388:	44 b3       	in	r20, 0x14	; 20
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 2e       	mov	r0, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_VoidSetPortDirection+0x112>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_VoidSetPortDirection+0x10e>
 39a:	80 95       	com	r24
 39c:	84 23       	and	r24, r20
 39e:	84 bb       	out	0x14, r24	; 20
					SET_Bit(DDRC_REG,i);
				}
			}
			else if (direction==INPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 3a0:	2f 5f       	subi	r18, 0xFF	; 255
 3a2:	3f 4f       	sbci	r19, 0xFF	; 255
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_VoidSetPortDirection+0x126>
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	28 30       	cpi	r18, 0x08	; 8
 3ac:	31 05       	cpc	r19, r1
 3ae:	60 f3       	brcs	.-40     	; 0x388 <DIO_VoidSetPortDirection+0x104>
 3b0:	08 95       	ret
					CLEAR_Bit(DDRC_REG,i);
				}
			}
			break;
		case portD:
			if (direction==OUTPUT)
 3b2:	61 30       	cpi	r22, 0x01	; 1
 3b4:	a9 f4       	brne	.+42     	; 0x3e0 <DIO_VoidSetPortDirection+0x15c>
 3b6:	0e c0       	rjmp	.+28     	; 0x3d4 <DIO_VoidSetPortDirection+0x150>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(DDRD_REG,i);
 3b8:	41 b3       	in	r20, 0x11	; 17
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 2e       	mov	r0, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_VoidSetPortDirection+0x142>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	0a 94       	dec	r0
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_VoidSetPortDirection+0x13e>
 3ca:	84 2b       	or	r24, r20
 3cc:	81 bb       	out	0x11, r24	; 17
			}
			break;
		case portD:
			if (direction==OUTPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 3ce:	2f 5f       	subi	r18, 0xFF	; 255
 3d0:	3f 4f       	sbci	r19, 0xFF	; 255
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_VoidSetPortDirection+0x154>
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	28 30       	cpi	r18, 0x08	; 8
 3da:	31 05       	cpc	r19, r1
 3dc:	68 f3       	brcs	.-38     	; 0x3b8 <DIO_VoidSetPortDirection+0x134>
 3de:	08 95       	ret
				{
					SET_Bit(DDRD_REG,i);
				}
			}
			else if (direction==INPUT)
 3e0:	66 23       	and	r22, r22
 3e2:	81 f0       	breq	.+32     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e4:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(DDRD_REG,i);
 3e6:	41 b3       	in	r20, 0x11	; 17
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 2e       	mov	r0, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_VoidSetPortDirection+0x170>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	0a 94       	dec	r0
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_VoidSetPortDirection+0x16c>
 3f8:	80 95       	com	r24
 3fa:	84 23       	and	r24, r20
 3fc:	81 bb       	out	0x11, r24	; 17
					SET_Bit(DDRD_REG,i);
				}
			}
			else if (direction==INPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 3fe:	2f 5f       	subi	r18, 0xFF	; 255
 400:	3f 4f       	sbci	r19, 0xFF	; 255
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	28 30       	cpi	r18, 0x08	; 8
 40a:	31 05       	cpc	r19, r1
 40c:	60 f3       	brcs	.-40     	; 0x3e6 <DIO_VoidSetPortDirection+0x162>
 40e:	08 95       	ret

00000410 <DIO_VoidSetPortValue>:


void DIO_VoidSetPortValue(u8 port_number,u8 value)
{
	u8 pinnumber=8;
	switch(port_number)
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	b9 f1       	breq	.+110    	; 0x482 <DIO_VoidSetPortValue+0x72>
 414:	38 f0       	brcs	.+14     	; 0x424 <DIO_VoidSetPortValue+0x14>
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	09 f4       	brne	.+2      	; 0x41c <DIO_VoidSetPortValue+0xc>
 41a:	62 c0       	rjmp	.+196    	; 0x4e0 <DIO_VoidSetPortValue+0xd0>
 41c:	83 30       	cpi	r24, 0x03	; 3
 41e:	09 f4       	brne	.+2      	; 0x422 <DIO_VoidSetPortValue+0x12>
 420:	8e c0       	rjmp	.+284    	; 0x53e <DIO_VoidSetPortValue+0x12e>
 422:	08 95       	ret
	{
		case portA:
			if (value==HIGH)
 424:	61 30       	cpi	r22, 0x01	; 1
 426:	a9 f4       	brne	.+42     	; 0x452 <DIO_VoidSetPortValue+0x42>
 428:	0e c0       	rjmp	.+28     	; 0x446 <DIO_VoidSetPortValue+0x36>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(PORTA_REG,i);
 42a:	4b b3       	in	r20, 0x1b	; 27
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 2e       	mov	r0, r18
 432:	02 c0       	rjmp	.+4      	; 0x438 <DIO_VoidSetPortValue+0x28>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	0a 94       	dec	r0
 43a:	e2 f7       	brpl	.-8      	; 0x434 <DIO_VoidSetPortValue+0x24>
 43c:	84 2b       	or	r24, r20
 43e:	8b bb       	out	0x1b, r24	; 27
	switch(port_number)
	{
		case portA:
			if (value==HIGH)
			{
				for (u16 i=0; i<pinnumber; i++)
 440:	2f 5f       	subi	r18, 0xFF	; 255
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_VoidSetPortValue+0x3a>
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	28 30       	cpi	r18, 0x08	; 8
 44c:	31 05       	cpc	r19, r1
 44e:	68 f3       	brcs	.-38     	; 0x42a <DIO_VoidSetPortValue+0x1a>
 450:	08 95       	ret
				{
					SET_Bit(PORTA_REG,i);
				}
			}
			else if (value==LOW)
 452:	66 23       	and	r22, r22
 454:	81 f0       	breq	.+32     	; 0x476 <DIO_VoidSetPortValue+0x66>
 456:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(PORTA_REG,i);
 458:	4b b3       	in	r20, 0x1b	; 27
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 2e       	mov	r0, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_VoidSetPortValue+0x56>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_VoidSetPortValue+0x52>
 46a:	80 95       	com	r24
 46c:	84 23       	and	r24, r20
 46e:	8b bb       	out	0x1b, r24	; 27
					SET_Bit(PORTA_REG,i);
				}
			}
			else if (value==LOW)
			{
				for (u16 i=0; i<pinnumber; i++)
 470:	2f 5f       	subi	r18, 0xFF	; 255
 472:	3f 4f       	sbci	r19, 0xFF	; 255
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_VoidSetPortValue+0x6a>
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	28 30       	cpi	r18, 0x08	; 8
 47c:	31 05       	cpc	r19, r1
 47e:	60 f3       	brcs	.-40     	; 0x458 <DIO_VoidSetPortValue+0x48>
 480:	08 95       	ret
					CLEAR_Bit(PORTA_REG,i);
				}
			}
			break;
		case portB:
			if (value==HIGH)
 482:	61 30       	cpi	r22, 0x01	; 1
 484:	a9 f4       	brne	.+42     	; 0x4b0 <DIO_VoidSetPortValue+0xa0>
 486:	0e c0       	rjmp	.+28     	; 0x4a4 <DIO_VoidSetPortValue+0x94>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(PORTB_REG,i);
 488:	48 b3       	in	r20, 0x18	; 24
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 2e       	mov	r0, r18
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_VoidSetPortValue+0x86>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_VoidSetPortValue+0x82>
 49a:	84 2b       	or	r24, r20
 49c:	88 bb       	out	0x18, r24	; 24
			}
			break;
		case portB:
			if (value==HIGH)
			{
				for (u16 i=0; i<pinnumber; i++)
 49e:	2f 5f       	subi	r18, 0xFF	; 255
 4a0:	3f 4f       	sbci	r19, 0xFF	; 255
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_VoidSetPortValue+0x98>
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	28 30       	cpi	r18, 0x08	; 8
 4aa:	31 05       	cpc	r19, r1
 4ac:	68 f3       	brcs	.-38     	; 0x488 <DIO_VoidSetPortValue+0x78>
 4ae:	08 95       	ret
				{
					SET_Bit(PORTB_REG,i);
				}
			}
			else if (value==LOW)
 4b0:	66 23       	and	r22, r22
 4b2:	81 f0       	breq	.+32     	; 0x4d4 <DIO_VoidSetPortValue+0xc4>
 4b4:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(PORTB_REG,i);
 4b6:	48 b3       	in	r20, 0x18	; 24
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 2e       	mov	r0, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_VoidSetPortValue+0xb4>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	0a 94       	dec	r0
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_VoidSetPortValue+0xb0>
 4c8:	80 95       	com	r24
 4ca:	84 23       	and	r24, r20
 4cc:	88 bb       	out	0x18, r24	; 24
					SET_Bit(PORTB_REG,i);
				}
			}
			else if (value==LOW)
			{
				for (u16 i=0; i<pinnumber; i++)
 4ce:	2f 5f       	subi	r18, 0xFF	; 255
 4d0:	3f 4f       	sbci	r19, 0xFF	; 255
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_VoidSetPortValue+0xc8>
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	28 30       	cpi	r18, 0x08	; 8
 4da:	31 05       	cpc	r19, r1
 4dc:	60 f3       	brcs	.-40     	; 0x4b6 <DIO_VoidSetPortValue+0xa6>
 4de:	08 95       	ret
					CLEAR_Bit(PORTB_REG,i);
				}
			}
			break;
		case portC:
			if (value==HIGH)
 4e0:	61 30       	cpi	r22, 0x01	; 1
 4e2:	a9 f4       	brne	.+42     	; 0x50e <DIO_VoidSetPortValue+0xfe>
 4e4:	0e c0       	rjmp	.+28     	; 0x502 <DIO_VoidSetPortValue+0xf2>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(PORTC_REG,i);
 4e6:	45 b3       	in	r20, 0x15	; 21
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 2e       	mov	r0, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_VoidSetPortValue+0xe4>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_VoidSetPortValue+0xe0>
 4f8:	84 2b       	or	r24, r20
 4fa:	85 bb       	out	0x15, r24	; 21
			}
			break;
		case portC:
			if (value==HIGH)
			{
				for (u16 i=0; i<pinnumber; i++)
 4fc:	2f 5f       	subi	r18, 0xFF	; 255
 4fe:	3f 4f       	sbci	r19, 0xFF	; 255
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_VoidSetPortValue+0xf6>
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	28 30       	cpi	r18, 0x08	; 8
 508:	31 05       	cpc	r19, r1
 50a:	68 f3       	brcs	.-38     	; 0x4e6 <DIO_VoidSetPortValue+0xd6>
 50c:	08 95       	ret
				{
					SET_Bit(PORTC_REG,i);
				}
			}
			else if (value==LOW)
 50e:	66 23       	and	r22, r22
 510:	81 f0       	breq	.+32     	; 0x532 <DIO_VoidSetPortValue+0x122>
 512:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(PORTC_REG,i);
 514:	45 b3       	in	r20, 0x15	; 21
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	02 2e       	mov	r0, r18
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_VoidSetPortValue+0x112>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_VoidSetPortValue+0x10e>
 526:	80 95       	com	r24
 528:	84 23       	and	r24, r20
 52a:	85 bb       	out	0x15, r24	; 21
					SET_Bit(PORTC_REG,i);
				}
			}
			else if (value==LOW)
			{
				for (u16 i=0; i<pinnumber; i++)
 52c:	2f 5f       	subi	r18, 0xFF	; 255
 52e:	3f 4f       	sbci	r19, 0xFF	; 255
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_VoidSetPortValue+0x126>
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	28 30       	cpi	r18, 0x08	; 8
 538:	31 05       	cpc	r19, r1
 53a:	60 f3       	brcs	.-40     	; 0x514 <DIO_VoidSetPortValue+0x104>
 53c:	08 95       	ret
					CLEAR_Bit(PORTC_REG,i);
				}
			}
			break;
		case portD:
			if (value==HIGH)
 53e:	61 30       	cpi	r22, 0x01	; 1
 540:	a9 f4       	brne	.+42     	; 0x56c <DIO_VoidSetPortValue+0x15c>
 542:	0e c0       	rjmp	.+28     	; 0x560 <DIO_VoidSetPortValue+0x150>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(PORTD_REG,i);
 544:	42 b3       	in	r20, 0x12	; 18
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 2e       	mov	r0, r18
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_VoidSetPortValue+0x142>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	0a 94       	dec	r0
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_VoidSetPortValue+0x13e>
 556:	84 2b       	or	r24, r20
 558:	82 bb       	out	0x12, r24	; 18
			}
			break;
		case portD:
			if (value==HIGH)
			{
				for (u16 i=0; i<pinnumber; i++)
 55a:	2f 5f       	subi	r18, 0xFF	; 255
 55c:	3f 4f       	sbci	r19, 0xFF	; 255
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_VoidSetPortValue+0x154>
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	28 30       	cpi	r18, 0x08	; 8
 566:	31 05       	cpc	r19, r1
 568:	68 f3       	brcs	.-38     	; 0x544 <DIO_VoidSetPortValue+0x134>
 56a:	08 95       	ret
				{
					SET_Bit(PORTD_REG,i);
				}
			}
			else if (value==LOW)
 56c:	66 23       	and	r22, r22
 56e:	81 f0       	breq	.+32     	; 0x590 <DIO_VoidSetPortValue+0x180>
 570:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(PORTD_REG,i);
 572:	42 b3       	in	r20, 0x12	; 18
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 2e       	mov	r0, r18
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_VoidSetPortValue+0x170>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	0a 94       	dec	r0
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_VoidSetPortValue+0x16c>
 584:	80 95       	com	r24
 586:	84 23       	and	r24, r20
 588:	82 bb       	out	0x12, r24	; 18
					SET_Bit(PORTD_REG,i);
				}
			}
			else if (value==LOW)
			{
				for (u16 i=0; i<pinnumber; i++)
 58a:	2f 5f       	subi	r18, 0xFF	; 255
 58c:	3f 4f       	sbci	r19, 0xFF	; 255
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_VoidSetPortValue+0x184>
 590:	20 e0       	ldi	r18, 0x00	; 0
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	28 30       	cpi	r18, 0x08	; 8
 596:	31 05       	cpc	r19, r1
 598:	60 f3       	brcs	.-40     	; 0x572 <DIO_VoidSetPortValue+0x162>
 59a:	08 95       	ret

0000059c <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(u8 pin_number,u8 port_number)
{
	u8 pinvalue=2;

	switch(port_number)
 59c:	61 30       	cpi	r22, 0x01	; 1
 59e:	89 f0       	breq	.+34     	; 0x5c2 <DIO_U8GetPinValue+0x26>
 5a0:	28 f0       	brcs	.+10     	; 0x5ac <DIO_U8GetPinValue+0x10>
 5a2:	62 30       	cpi	r22, 0x02	; 2
 5a4:	c9 f0       	breq	.+50     	; 0x5d8 <DIO_U8GetPinValue+0x3c>
 5a6:	63 30       	cpi	r22, 0x03	; 3
 5a8:	11 f1       	breq	.+68     	; 0x5ee <DIO_U8GetPinValue+0x52>
 5aa:	2c c0       	rjmp	.+88     	; 0x604 <DIO_U8GetPinValue+0x68>
	{
		case portA:
			pinvalue = GET_Bit(PINA_REG,pin_number);
 5ac:	29 b3       	in	r18, 0x19	; 25
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	a9 01       	movw	r20, r18
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_U8GetPinValue+0x1c>
 5b4:	55 95       	asr	r21
 5b6:	47 95       	ror	r20
 5b8:	8a 95       	dec	r24
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_U8GetPinValue+0x18>
 5bc:	ca 01       	movw	r24, r20
 5be:	81 70       	andi	r24, 0x01	; 1
			//return ((GET_Bit(port_number,pin_number)) & (0X01));
			break;
 5c0:	22 c0       	rjmp	.+68     	; 0x606 <DIO_U8GetPinValue+0x6a>
		case portB:
			pinvalue = GET_Bit(PINB_REG,pin_number);
 5c2:	26 b3       	in	r18, 0x16	; 22
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	a9 01       	movw	r20, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_U8GetPinValue+0x32>
 5ca:	55 95       	asr	r21
 5cc:	47 95       	ror	r20
 5ce:	8a 95       	dec	r24
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_U8GetPinValue+0x2e>
 5d2:	ca 01       	movw	r24, r20
 5d4:	81 70       	andi	r24, 0x01	; 1
			//return ((GET_Bit(port_number,pin_number)) & (0X01));
			break;
 5d6:	17 c0       	rjmp	.+46     	; 0x606 <DIO_U8GetPinValue+0x6a>
		case portC:
			pinvalue = GET_Bit(PINC_REG,pin_number);
 5d8:	23 b3       	in	r18, 0x13	; 19
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	a9 01       	movw	r20, r18
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_U8GetPinValue+0x48>
 5e0:	55 95       	asr	r21
 5e2:	47 95       	ror	r20
 5e4:	8a 95       	dec	r24
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_U8GetPinValue+0x44>
 5e8:	ca 01       	movw	r24, r20
 5ea:	81 70       	andi	r24, 0x01	; 1
			//return ((GET_Bit(port_number,pin_number)) & (0X01));
			break;
 5ec:	0c c0       	rjmp	.+24     	; 0x606 <DIO_U8GetPinValue+0x6a>
		case portD:
			pinvalue = GET_Bit(PIND_REG,pin_number);
 5ee:	20 b3       	in	r18, 0x10	; 16
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	a9 01       	movw	r20, r18
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_U8GetPinValue+0x5e>
 5f6:	55 95       	asr	r21
 5f8:	47 95       	ror	r20
 5fa:	8a 95       	dec	r24
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_U8GetPinValue+0x5a>
 5fe:	ca 01       	movw	r24, r20
 600:	81 70       	andi	r24, 0x01	; 1
			//return ((GET_Bit(port_number,pin_number)) & (0X01));
			break;
 602:	01 c0       	rjmp	.+2      	; 0x606 <DIO_U8GetPinValue+0x6a>
}


u8 DIO_U8GetPinValue(u8 pin_number,u8 port_number)
{
	u8 pinvalue=2;
 604:	82 e0       	ldi	r24, 0x02	; 2
			break;

	}
	
	return ((pinvalue) & (0X01));
 606:	81 70       	andi	r24, 0x01	; 1
 608:	08 95       	ret

0000060a <main>:

int main(void)
{

    /* Replace with your application code */
	DIO_VoidSetPinDirection(0,portD,OUTPUT);
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	63 e0       	ldi	r22, 0x03	; 3
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(4,portA,INPUT);
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	84 e0       	ldi	r24, 0x04	; 4
 61a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinValue(4,portA,HIGH);     //activate pull up resistor at pin A4
 61e:	41 e0       	ldi	r20, 0x01	; 1
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	84 e0       	ldi	r24, 0x04	; 4
 624:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_VoidSetPinValue>

	DIO_VoidSetPortDirection(portC,OUTPUT);
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	0e 94 42 01 	call	0x284	; 0x284 <DIO_VoidSetPortDirection>
	DIO_VoidSetPortValue(portC,HIGH);
 630:	61 e0       	ldi	r22, 0x01	; 1
 632:	82 e0       	ldi	r24, 0x02	; 2
 634:	0e 94 08 02 	call	0x410	; 0x410 <DIO_VoidSetPortValue>
	
    while (1) 
    {
		if (((DIO_U8GetPinValue(4,portA)) & (0X01)) == 0)
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	84 e0       	ldi	r24, 0x04	; 4
 63c:	0e 94 ce 02 	call	0x59c	; 0x59c <DIO_U8GetPinValue>
 640:	80 fd       	sbrc	r24, 0
 642:	fa cf       	rjmp	.-12     	; 0x638 <main+0x2e>
		{
			DIO_VoidSetPinValue(0,portD,HIGH);
 644:	41 e0       	ldi	r20, 0x01	; 1
 646:	63 e0       	ldi	r22, 0x03	; 3
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_VoidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 64e:	2f e9       	ldi	r18, 0x9F	; 159
 650:	86 e8       	ldi	r24, 0x86	; 134
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	21 50       	subi	r18, 0x01	; 1
 656:	80 40       	sbci	r24, 0x00	; 0
 658:	90 40       	sbci	r25, 0x00	; 0
 65a:	e1 f7       	brne	.-8      	; 0x654 <main+0x4a>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <main+0x54>
 65e:	00 00       	nop
			_delay_ms(500);
			DIO_VoidSetPinValue(0,portD,LOW);
 660:	40 e0       	ldi	r20, 0x00	; 0
 662:	63 e0       	ldi	r22, 0x03	; 3
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0e 94 bc 00 	call	0x178	; 0x178 <DIO_VoidSetPinValue>
 66a:	2f e9       	ldi	r18, 0x9F	; 159
 66c:	86 e8       	ldi	r24, 0x86	; 134
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	21 50       	subi	r18, 0x01	; 1
 672:	80 40       	sbci	r24, 0x00	; 0
 674:	90 40       	sbci	r25, 0x00	; 0
 676:	e1 f7       	brne	.-8      	; 0x670 <main+0x66>
 678:	00 c0       	rjmp	.+0      	; 0x67a <main+0x70>
 67a:	00 00       	nop
 67c:	dd cf       	rjmp	.-70     	; 0x638 <main+0x2e>

0000067e <_exit>:
 67e:	f8 94       	cli

00000680 <__stop_program>:
 680:	ff cf       	rjmp	.-2      	; 0x680 <__stop_program>
